package com.builtbroken.mc.core.load;

import com.builtbroken.mc.core.Engine;
import com.builtbroken.mc.core.References;
import com.builtbroken.mc.framework.mod.AbstractProxy;
import com.builtbroken.mc.framework.radar.RadarRegistry;
import com.builtbroken.mc.framework.radio.RadioRegistry;
import net.minecraft.block.Block;
import net.minecraft.item.Item;
import net.minecraft.item.crafting.IRecipe;
import net.minecraftforge.common.MinecraftForge;
import net.minecraftforge.common.config.Configuration;
import net.minecraftforge.event.RegistryEvent;
import net.minecraftforge.fml.common.Mod;
import net.minecraftforge.fml.common.ModMetadata;
import net.minecraftforge.fml.common.SidedProxy;
import net.minecraftforge.fml.common.event.FMLInitializationEvent;
import net.minecraftforge.fml.common.event.FMLLoadCompleteEvent;
import net.minecraftforge.fml.common.event.FMLPostInitializationEvent;
import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
import net.minecraftforge.fml.common.network.NetworkRegistry;
import org.apache.logging.log4j.Logger;

import java.io.File;
import java.util.Arrays;

/**
 * Mod loader for the engine
 *
 * @see <a href="https://github.com/BuiltBrokenModding/VoltzEngine/blob/development/license.md">License</a> for what you can and can't do with the code.
 * Created by Dark(DarkGuardsman, Robert) on 8/12/2017.
 */
@Mod(modid = References.ID, name = References.NAME, version = References.VERSION)
@Mod.EventBusSubscriber()
public class ModLoader
{
    @SidedProxy(clientSide = "com.builtbroken.mc.core.load.ClientProxy", serverSide = "com.builtbroken.mc.core.load.CommonProxy")
    public static CommonProxy proxy;

    @Mod.Metadata(References.ID)
    public static ModMetadata metadata;

    @Mod.Instance(References.ID)
    public static ModLoader instance;

    public static Configuration config;

    @Mod.EventHandler
    public void preInit(FMLPreInitializationEvent event)
    {
        //Init run time references
        References.GLOBAL_CONFIG_FOLDER = event.getModConfigurationDirectory();
        References.ROOT_FOLDER = References.GLOBAL_CONFIG_FOLDER.getParentFile();
        References.BBM_CONFIG_FOLDER = new File(event.getModConfigurationDirectory(), "bbm");

        //Load config files
        config = new Configuration(new File(References.BBM_CONFIG_FOLDER, "ve/VoltzEngine.cfg"));

        NetworkRegistry.INSTANCE.registerGuiHandler(this, proxy);

        MinecraftForge.EVENT_BUS.register(this);
        MinecraftForge.EVENT_BUS.register(RadarRegistry.INSTANCE);
        MinecraftForge.EVENT_BUS.register(RadioRegistry.INSTANCE);

        //Call loader
        proxy.preInit();
        Engine.packetHandler.preInit();
    }

    //@SubscribeEvent
    public static void registerItems(RegistryEvent.Register<Item> event)
    {

    }

    //@SubscribeEvent
    public static void registerBlocks(RegistryEvent.Register<Block> event)
    {

    }

    //@SubscribeEvent
    public static void registerRecipes(RegistryEvent.Register<IRecipe> event)
    {

    }

    @Mod.EventHandler
    public void init(FMLInitializationEvent evt)
    {
        //TODO make sure is setup correctly
        metadata.modId = References.NAME;
        metadata.name = References.NAME;
        metadata.description = References.NAME + " is a content creation toolkit";
        metadata.url = "http://www.builtbroken.com";
        metadata.version = References.VERSION;
        metadata.authorList = Arrays.asList("DarkCow");
        metadata.autogenerated = false;


        proxy.init();
        Engine.packetHandler.init();
    }

    @Mod.EventHandler
    public void postInit(FMLPostInitializationEvent evt)
    {
        proxy.postInit();
        Engine.packetHandler.postInit();
        getConfig().save();
    }

    @Mod.EventHandler
    public void loadCompleteEvent(FMLLoadCompleteEvent event)
    {
        proxy.loadComplete();
        Engine.packetHandler.loadComplete();
    }

    public AbstractProxy getProxy()
    {
        return proxy;
    }

    public Configuration getConfig()
    {
        return config;
    }

    @Deprecated
    public static Logger logger()
    {
        return Engine.logger();
    }
}
